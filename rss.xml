<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Freeborn Charles Blog]]></title><description><![CDATA[My cogitations on the modern web development - JavaScript, React, Gatsby and the JAMstack]]></description><link>https://www.freeborncharles.com</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 20 Oct 2022 08:54:16 GMT</lastBuildDate><item><title><![CDATA[Documenting a Sound File API for a Hypothetical Dating Site.]]></title><description><![CDATA[Introduction - Documenting an API Demo In this article, we will be documenting an API for a new dating service for people who only care…]]></description><link>https://www.freeborncharles.com/documenting-api/</link><guid isPermaLink="false">https://www.freeborncharles.com/documenting-api/</guid><pubDate>Wed, 19 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Introduction - Documenting an API Demo&lt;/h1&gt;
&lt;p&gt;In this article, we will be documenting an API for a new dating service for people who only care about how their dates sound, not how they look. &lt;/p&gt;
&lt;p&gt;The name of the company is SoundDate and is a hypothetical dating site - which was made up for the sole purpose of demonstrating how to document an API as part of the &lt;a href=&quot;https://www.udemy.com/course/learn-api-technical-writing-2-rest-for-writers/&quot;&gt;Learn API Technical Writing 2: REST for Writers&lt;/a&gt; course.&lt;/p&gt;
&lt;h2&gt;Information to document the request for a user to upload a sound file&lt;/h2&gt;
&lt;p&gt;Here the user is expected to upload a sound file to their own profile and to get information on sound files for another user’s profile.&lt;/p&gt;
&lt;h2&gt;Uploading a Sound File to the current user’s profile&lt;/h2&gt;
&lt;h3&gt;Information from the developer team&lt;/h3&gt;
&lt;p&gt;Disclaimer: Do note that the API website for this documentation, isn’t real. It is for demonstration purpose only.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The server address is &lt;a href=&quot;https://api.sounddate.com&quot;&gt;https://api.sounddate.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;The resource is /profile/sound&lt;/li&gt;
&lt;li&gt;The method is POST&lt;/li&gt;
&lt;li&gt;There are three headers:
a. Bearer has the access token. Required.
b.  Content-Type has the sound file format, which can be either &lt;code class=&quot;language-text&quot;&gt;audio/mpeg&lt;/code&gt; for mp3 files or &lt;code class=&quot;language-text&quot;&gt;audio/x-wav&lt;/code&gt; for wav files. Default is &lt;code class=&quot;language-text&quot;&gt;audio/mpeg&lt;/code&gt;.
c. Accept has the response format, which can be &lt;code class=&quot;language-text&quot;&gt;application/xml&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;application/json&lt;/code&gt;. Default is JSON.&lt;/li&gt;
&lt;li&gt;The POST body is the sound file. &lt;/li&gt;
&lt;li&gt;The second file must be 5 minutes or shorter.&lt;/li&gt;
&lt;li&gt;The response hs two element:
a. id: An integer, which is the ID of the new sound file.
b. length: A float, which is the length of the sound file, in seconds&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;The Sound File upload API reference documentation&lt;/h3&gt;
&lt;p&gt;Documenting the sound file API reference documentation using thr information provided by the developers team from above.&lt;/p&gt;
&lt;h4&gt;URL&lt;/h4&gt;
&lt;p&gt;POST &lt;a href=&quot;https://api.sounddate.com/profile/sound&quot;&gt;https://api.sounddate.com/profile/sound&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Headers&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Header name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bearer&lt;/td&gt;
&lt;td&gt;Access token&lt;/td&gt;
&lt;td&gt;Required&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;Sound file from the user&lt;/td&gt;
&lt;td&gt;Required&lt;/td&gt;
&lt;td&gt;File can be audio/mpeg for mp3 or audio/x-wav for wav files. Default is audio/mpeg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept&lt;/td&gt;
&lt;td&gt;The format of the returned data&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;Can be application/xml or application/json. The default is JSON&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;POST Body&lt;/h4&gt;
&lt;p&gt;The POST body is the sound file, &lt;/p&gt;
&lt;p&gt;Note: The sound file should be 5 minutes or shorter.&lt;/p&gt;
&lt;h3&gt;Sample Request&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;POST https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//api.sounddate.com/profile/sound&lt;/span&gt;

Bearer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;acces token&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Content-Type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; audio/mpeg
Accept&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;application/json&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sound file
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Response&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Element&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;ID of the new sound file&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;length&lt;/td&gt;
&lt;td&gt;sound file length&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;length is in seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Retrieving a sound file from another user&lt;/h2&gt;
&lt;h3&gt;Information from the developer team&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The server address is &lt;a href=&quot;https://api.sounddate.com&quot;&gt;https://api.sounddate.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The resource is /user/{user id}/profile/sound&lt;/li&gt;
&lt;li&gt;The method is GET&lt;/li&gt;
&lt;li&gt;There are two headers:
a. Bearer has the access token. Required.
b. Accept has the response format, which can be application/xml or application/json. Default is JSON.&lt;/li&gt;
&lt;li&gt;There is one query parameter called sortOrder. This determines the order that the sound files are returned. It has four possible values:
a. mostRecent, sorts most recent to earliest
b. earliest, sorts earliest to most recent
c. shortest, sorts shortest to longest
d. longest, sorts longest to shortest.&lt;/li&gt;
&lt;li&gt;The sortOrder parameter is optional. The default is mostRecent.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;The sound file retrieval API reference documentation&lt;/h3&gt;
&lt;p&gt;Retrieving a user’s uploaded sound file.&lt;/p&gt;
&lt;h4&gt;URL&lt;/h4&gt;
&lt;p&gt;GET &lt;code class=&quot;language-text&quot;&gt;https://api.sounddate.com/user/{user id}/profile/sound&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where {user id} is the id of the user that has the sound file.&lt;/p&gt;
&lt;h4&gt;Headers&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Header name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bearer&lt;/td&gt;
&lt;td&gt;Access token&lt;/td&gt;
&lt;td&gt;Required&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept&lt;/td&gt;
&lt;td&gt;The format of the returned data&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;Can be application/xml or application/json. The default is JSON&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Query Parameters&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sortOrder&lt;/td&gt;
&lt;td&gt;Order in which sound files are returned&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;Has four possible values - &lt;code class=&quot;language-text&quot;&gt;mostRecent&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;earliest&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;shortest&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;longest&lt;/code&gt;. Default is &lt;code class=&quot;language-text&quot;&gt;mostRecent&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;NOTE:
&lt;code class=&quot;language-text&quot;&gt;mostRecent&lt;/code&gt; sorts most recent to &lt;code class=&quot;language-text&quot;&gt;earliest&lt;/code&gt;.
&lt;code class=&quot;language-text&quot;&gt;earliest&lt;/code&gt; sorts earliest to most recent.
&lt;code class=&quot;language-text&quot;&gt;shortest&lt;/code&gt; sorts shortest to &lt;code class=&quot;language-text&quot;&gt;longest&lt;/code&gt;.
&lt;code class=&quot;language-text&quot;&gt;longest&lt;/code&gt; sorts longest to &lt;code class=&quot;language-text&quot;&gt;shortest&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Sample Response&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;soundFiles&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;65432&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://api.sounddate.com/profile/sound/65432.mp3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;length&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.2&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23456&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://api.sounddate.com/profile/sound/23456.mp3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;length&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13.9&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Status Codes and Errors&lt;/h4&gt;
&lt;p&gt;The following table lists the returned HTTP status codes.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;Successful&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;401&lt;/td&gt;
&lt;td&gt;Unauthorized&lt;/td&gt;
&lt;td&gt;Invalid access token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;413&lt;/td&gt;
&lt;td&gt;Payload too large&lt;/td&gt;
&lt;td&gt;Uploaded sound file longer than 5 minutes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[A high level overview of Web 3.0]]></title><description><![CDATA[Introduction - The internet, society, and our lives The internet has undoubtedly played a significant role in our lives and communities over…]]></description><link>https://www.freeborncharles.com/what-is-web3/</link><guid isPermaLink="false">https://www.freeborncharles.com/what-is-web3/</guid><pubDate>Thu, 04 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Introduction - The internet, society, and our lives&lt;/h2&gt;
&lt;p&gt;The internet has undoubtedly played a significant role in our lives and communities over the past three decades. We can even argue that the internet is one of the greatest inventions of mankind. For it has changed (and will continue to change) the course of humanity forever.&lt;/p&gt;
&lt;p&gt;Think about it for a moment, this article was written from Warri - a city in Nigeria and can be read from anywhere in the world. This is possible, thanks to the internet that has enabled people from across villages, towns, cities, countries, and even continents to share information in real-time, carry out economic activities and rendering of services to advance humanity.&lt;/p&gt;
&lt;p&gt;We can’t even imagine what life will be like if we didn’t have access to the internet. Yet, with all of the tremendous impact of the internet in our lives and society, its history is relatively young.&lt;/p&gt;
&lt;h2&gt;Web1.0 - Read-only&lt;/h2&gt;
&lt;p&gt;At the most fundamental level, we can say that the internet is a global network of connected computers. And there are applications that run or are built on top of the internet. One of these applications is the web.&lt;/p&gt;
&lt;p&gt;The early internet code-named “internet 1.0” or “Web1.0” existed in the period between the 1990s and early 2000s. These internet era was characterised by decentralization.&lt;/p&gt;
&lt;p&gt;Web 1.0 was built on top of open protocols like HTTP, SMTP, FTP, IRC and SMS, which anyone can then build on top of.
The vision for the internet (open protocols) - the cyberspace was to allow anyone to build and contribute to the web. And thus, advancing the course of humanity.&lt;/p&gt;
&lt;p&gt;So at the core of web1.0 was community-governance (open protocols - HTTP, SMTP, FTP), decentralized networks, and being able to contribute and create contents for the web, if you had the technical knowledge.&lt;/p&gt;
&lt;p&gt;Web 1.0 was known as the read-only web because few individuals (or corporations) created the contents and the end-users only consumed the created contents - static read-only content. This is the premise on which the term “static web” is hinged.&lt;/p&gt;
&lt;p&gt;But web 1.0 had some limitations. Some of these limitations included:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stateless - Web 1.0 didn’t capture user data or state. This meant that if you a user visited a website, the website had no way of knowing that the user had previously visited it.&lt;/li&gt;
&lt;li&gt;No standard protocols. Today, we have different protocols that power the web - think for example payment gateways, search, social media. In Web 1.0, there were no standard protocols or technologies to make these possible.&lt;/li&gt;
&lt;li&gt;Strong technical knowledge/expertise - The regular people were cut off to a large extent in web 1.0. To contribute to web 1.0 even if it meant building a website and sharing content, required a strong technical knowledge.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the quest to solve some of the limitations and challenges of web 1.0, web 2.0 was born.&lt;/p&gt;
&lt;p&gt;Web 2.0 - Read/Write
Web 2.0 was born or created to solve some of the challenges and limitations of web 1.0. One of these challenges was the capturing of “state” or user-data. In the Web 1.0 era, websites were unable to capture state or user data or even knowing if a user had previously visited the website.
So as a web master, it was difficult to know the demographic of your end users, meaning that you couldn’t build products and render services targeted at these end-users.&lt;/p&gt;
&lt;p&gt;The first attempt at solving this challenge of capturing state and user data was the &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;HTTP cookie&lt;/a&gt;, which was created by &lt;a href=&quot;https://en.wikipedia.org/wiki/Lou_Montulli&quot;&gt;Lou Montulli&lt;/a&gt; at Nescape. With HTTP cookie, a web master can tell if a user had visited a website previously.&lt;/p&gt;
&lt;p&gt;And so with user state being captured, we transitioned into Web 2.0.&lt;/p&gt;
&lt;h2&gt;The Web 2.0 era span the early 2000s into the current period.&lt;/h2&gt;
&lt;p&gt;Web 2.0 is often referred to as the read/write web. And here’s why - technologies (products/platforms) were built to make it easy for users to create content and interact with the web in real time. In web 2.0, you don’t need to have strong technical knowledge to create contents and share these contents.&lt;/p&gt;
&lt;p&gt;Organizations already have the technologies setup for you to do the content creation, all you needed was to sign up as a user and use the platform. What’s more, you could also interact with the contents of other users - read/write.
At the fore-front of web 2.0 is? You guessed it right - social media.&lt;/p&gt;
&lt;p&gt;Value was created in Web 2.0 and organizations made money from user data and building of products, services, and technologies that are currently powering the modern web.&lt;/p&gt;
&lt;p&gt;Examples of these products built on top of Web 2.0 will include Email (recall SMTP), Cloud storage and transfer of files like DropBox and Drive (recall FTP), Slack (recall IRC).&lt;/p&gt;
&lt;p&gt;And then for examples of services (and technologies) built on top of Web 2.0, include Payment platforms and gateways like PayPal, search like Google, social media like Facebook and Twitter, e-commerce like Amazon, and eBay.&lt;/p&gt;
&lt;p&gt;As products, services, and technologies were built on top of user data, some of these organizations became extremely valuable and in the long run, powerful. In making our usage of the web easy and our lives better, there was a downside to this - our usage of the web, the internet, data and how we now see the world is largely controlled by these mega corporations.&lt;/p&gt;
&lt;p&gt;Often referred to as state aggregators, these organizations became the dominant players of the web 2.0 era.&lt;/p&gt;
&lt;p&gt;What’s more about web 2.0, is that the purpose for which the internet was created now seem to be defeated. For example, while Web 2.0 became the dynamic web, wherein everyone with access to the internet can create content and interact with the web, giving rise to the term “read/write” web, the monetary reward went to the corporations.&lt;/p&gt;
&lt;p&gt;So think of Web 2.0 as a phase where users created content and corporations profited out of the users content and even used the user’s data to build products (and sell ads) tailored to the users via their captured data.&lt;/p&gt;
&lt;p&gt;We often refer to Web 2.0 as read-write, since it gave users the power to read and publish contents of their own.&lt;/p&gt;
&lt;p&gt;But in spite of the major wins and advancement of web 2.0, there were major challenges. One of these is the movement away from the main reason while the web was created in the first place - open cyberspace where everyone could contribute without control or gatekeeping from powerful individuals, organizations, and the government.&lt;/p&gt;
&lt;h3&gt;The limitations and challenges of Web2.0&lt;/h3&gt;
&lt;p&gt;Centralization is at the core of Web 2.0.&lt;/p&gt;
&lt;p&gt;And here’s why - most internet traffic (web and app usage) goes through the network of a few large corporations. And by relying on these few large corporations to host all the content of the internet makes it possible for these companies to determine the course of our lives on cyberspace like controlling speeches, the choices we make based on the contents being fed to us, how we now use the world, and even shutting down entire services by the government.&lt;/p&gt;
&lt;p&gt;Here are some of the challenges and limitations of web 2.0, listed in no particular order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Privacy&lt;/li&gt;
&lt;li&gt;Power and Control&lt;/li&gt;
&lt;li&gt;Monopolistic behavior&lt;/li&gt;
&lt;li&gt;Ownership&lt;/li&gt;
&lt;li&gt;Monetization of apps&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Web 3.0 - Read/Write/Trustless&lt;/h2&gt;
&lt;p&gt;The original vision of the internet was for everyone to build on the network without fear of it being shut down or controlled across national borders. The internet was built originally to support a distributed system - a network without centralization.&lt;/p&gt;
&lt;p&gt;Web3 is built on stateful protocols like Ethereum.&lt;/p&gt;
&lt;p&gt;At the core of web3 is the idea of consensus protocols and standards with money baked in.&lt;/p&gt;
&lt;p&gt;Web3 is built for interoperability. Think for a moment about DeFi - Decentralized Finance - which is attempting to build a new financial system without central financial institutions. This is one of the most promising layers being built on Web3.&lt;/p&gt;
&lt;p&gt;Web 3.0 is hinged on decentralization - herein, ownership is shared and isn’t placed on a single individual, and/or corporation. And at the core of decentralization is community participation. Think DAOs - Decentralized Autonomous Organizations.&lt;/p&gt;
&lt;p&gt;From the lens of monetary value accrued, decentralization is about moving money around to the people who create and the people who consume, and to the people maintaining and improving the protocol - network.&lt;/p&gt;
&lt;p&gt;This article was originally written and published &lt;a href=&quot;https://dev.to/charliecodes/a-high-level-overview-of-web-30-4fid&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is Blockchain? A simplified introduction to Blockchain]]></title><description><![CDATA[Introduction - What is a blockchain? In its simplest terms, blockchain is a distributed database - an unchangeable record (or ledger) of…]]></description><link>https://www.freeborncharles.com/what-is-blockchain/</link><guid isPermaLink="false">https://www.freeborncharles.com/what-is-blockchain/</guid><pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Introduction - What is a blockchain?&lt;/h1&gt;
&lt;p&gt;In its simplest terms, blockchain is a distributed database - an unchangeable record (or ledger) of asset ownership.&lt;/p&gt;
&lt;p&gt;Blockchain enables the peer-to-peer transfer of digital assets without intermediaries, in a decentralized network. With blockchain, trust is established amongst unknown individuals. Blockchain was originally created to support cryptocurrencies like Bitcoin.&lt;/p&gt;
&lt;p&gt;From a high level perspective, we can say that blockchain is a Decentralized Ledger Technology - DLT, comprising a triple-entry ledger. Blockchain contains debits, credits, and an immutable link to all past debits and credits.&lt;/p&gt;
&lt;p&gt;Most blockchain projects are built around -
a. Decentralization
b. Scalability
c. Security&lt;/p&gt;
&lt;p&gt;The three items listed above is what the &lt;a href=&quot;https://twitter.com/charliecodes/status/1547211026160123906&quot;&gt;blockchain trilemma&lt;/a&gt; is hinged on. The blockchain trilemma is a widely held belief that decentralized networks can only provide two of the three - decentralization, scalability, and security - benefits of blockchain at any given time.&lt;/p&gt;
&lt;p&gt;Establishing trust on the blockchain entails -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;Verification&lt;/li&gt;
&lt;li&gt;Consensus&lt;/li&gt;
&lt;li&gt;Immutable recording&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, blockchain technology supports methods for a decentralized peer-to-peer system, a collective trust model, and a distributed immutable ledger of transaction records.&lt;/p&gt;
&lt;h2&gt;Blockchain and decentralized systems&lt;/h2&gt;
&lt;p&gt;As a DLT, one of the benefits of the blockchain is the decentralized model. Blockchain operates in a trustless environment and with the decentralization model, there is no single point of failure.&lt;/p&gt;
&lt;p&gt;And herein lies the strength of blockchains.&lt;/p&gt;
&lt;p&gt;So we can say that a blockchain is just a database that is maintained by a network of users and secured via cryptography.&lt;/p&gt;
&lt;p&gt;In the decentralized model, every node - computer - on the blockchain is part of the network. You can think of a blockchain as a truly shared data infrastructure. New transactions are broadcast to and recorded by the network and every node will update their local copy of the blockchain.&lt;/p&gt;
&lt;p&gt;How then is trust implemented, if we say that blockchain operates in a trustless environment? Trust in a blockchain is implemented via algorithms and mechanisms like consensus. And this is possible, thanks to decentralization.&lt;/p&gt;
&lt;p&gt;Blockchain is about securing, validating, verifying, and making sure resources needed for transaction execution are available.&lt;/p&gt;
&lt;p&gt;To establish trust in a blockchain thus include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Securing chain using protocols&lt;/li&gt;
&lt;li&gt;Validating transactions and blocks for tampering&lt;/li&gt;
&lt;li&gt;Verifying availability of resources for transactions&lt;/li&gt;
&lt;li&gt;Executing and confirming transactions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The blockchain structure&lt;/h2&gt;
&lt;p&gt;A blockchain is a digital, append-only list of data records, and a type of distributed database. Records on a blockchain are called blocks, which are organized in a chronological order and are linked and secured using cryptography.&lt;/p&gt;
&lt;p&gt;A block consists of the header information about the block and a set of valid transactions.&lt;/p&gt;
&lt;p&gt;On the Bitcoin blockchain, transaction is the basic element. Transactions are validated and broadcast across the nodes on a blockchain. Many transactions form a block and these blocks are added to the blockchain through consensus.&lt;/p&gt;
&lt;h2&gt;Types of blockchains&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Public blockchain&lt;/li&gt;
&lt;li&gt;Private blockchain&lt;/li&gt;
&lt;li&gt;Hybrid or consortium blockchain&lt;/li&gt;
&lt;li&gt;Sidechains&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Basic oprations in a blockchain&lt;/h2&gt;
&lt;p&gt;The main operations in a blockchain are transaction validation and block creation with the consensus of the participants - miners.&lt;/p&gt;
&lt;p&gt;Two major roles for participants - miners in a blockchain -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Participants that initiate a transfer of value by creating a transaction.&lt;/li&gt;
&lt;li&gt;Participants that work as miners who take on added work to verify transactions, broadcast transactions, compete to create a block, and reach consensus to validate the transactions. These participants are compensated with cryptocurrency like BTC.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Rules of blockchains&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;If a record has been created and recorded, it can’t be changed.&lt;/li&gt;
&lt;li&gt;Data written into a blockchain is a historical and immutable record.&lt;/li&gt;
&lt;li&gt;Data on the blockchain must be validated and proven that it has not been tampered.&lt;/li&gt;
&lt;li&gt;All nodes - computers - running on a blockchain must agree on all data stored in it. And that is consensus.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Algorithms and techniques in a blockchain&lt;/h2&gt;
&lt;p&gt;Consensus provides the technical infrastructure layer for blockchains. It does two things:
a. It ensures that the next block in a blockchain is the one and only version of truth.
b. It keeps powerful adversaries from taking over the system.&lt;/p&gt;
&lt;p&gt;Consensus is the heart of blockchain. And an example of this consensus is Proof of Work and Proof of Stake. &lt;/p&gt;
&lt;p&gt;This leads to the two techniques for securing the blockchain - validation and verification - includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hashing&lt;/li&gt;
&lt;li&gt;Asymmetric key encryption&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Hashing&lt;/h3&gt;
&lt;p&gt;A hash function or hashing transforms and maps an arbitrary length of input data value to a fixed length value. The input data can be a document data of any length, tree data or block data.&lt;/p&gt;
&lt;p&gt;This implies that hashing is taking an input of any length and producing an output of a fixed length.&lt;/p&gt;
&lt;p&gt;The hashing requirements stipulate that an algorithm should be a one-way function and it should be collision-free.&lt;/p&gt;
&lt;h3&gt;Six properties to consider a hash as secured&lt;/h3&gt;
&lt;p&gt;These six properties can be used to consider that a cryptographic hash function is secured:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deterministic&lt;/li&gt;
&lt;li&gt;Quick computation&lt;/li&gt;
&lt;li&gt;Pre-image resistance&lt;/li&gt;
&lt;li&gt;A small change in input changes the output&lt;/li&gt;
&lt;li&gt;Collision resistant&lt;/li&gt;
&lt;li&gt;Puzzle friendly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Pros of blockchain&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tokenization - You can create your own coins or tokens that have real-world value.&lt;/li&gt;
&lt;li&gt;Publicly verifiable transactions.&lt;/li&gt;
&lt;li&gt;Secured&lt;/li&gt;
&lt;li&gt;Lower transaction costs as a result of removing intermediaries.&lt;/li&gt;
&lt;li&gt;With smart contracts, we can achieve business process automation.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Cons of blockchain&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Blockchain is still a relatively new technology. So expect more evolution of the technology.&lt;/li&gt;
&lt;li&gt;Scalability needs to be addressed for blockchain to achieve mass adoption.&lt;/li&gt;
&lt;li&gt;Keeping data in blocks is still significantly high.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Blockchain use cases&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Background check - education credentails and criminal records.&lt;/li&gt;
&lt;li&gt;Secure document storage like home deeds, and will.&lt;/li&gt;
&lt;li&gt;Birth registries&lt;/li&gt;
&lt;li&gt;Land registries&lt;/li&gt;
&lt;li&gt;Tokenized economy&lt;/li&gt;
&lt;li&gt;Payment channels &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Summary/Conclusion&lt;/h2&gt;
&lt;p&gt;A blockchain is a globally shared, transactional database. This means everyone can read entries in the database by participating in the network or protocol.&lt;/p&gt;
&lt;p&gt;Blockchain is a state-based machine. It maintains a state until something happens. The mechanism for operating and determining the true state of the network is consensus. &lt;/p&gt;
&lt;p&gt;The blockchain is secured by a combination of decentralization, hashing, and encryption.&lt;/p&gt;
&lt;p&gt;You can think of a block as a group of data that’s packaged into one artifact. And we create an immutable link between blocks via cryptography.&lt;/p&gt;
&lt;p&gt;Changing data on any block will result in a different hash.&lt;/p&gt;
&lt;p&gt;Consensus mechanisms are the nuts and bolts of validation.&lt;/p&gt;
&lt;p&gt;In our next article, we will take a look at the Ethereum blockchain.&lt;/p&gt;
&lt;p&gt;And if you find this article interesting, kindly click here to share it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Some Personal News - I've joined the IPFS & Filecoin projects at Protocol Labs]]></title><description><![CDATA[Hi friends, I am thrilled to announce that I have joined the IPFS and Filecoin projects at Protocol Labs as a Technical Content Strategist…]]></description><link>https://www.freeborncharles.com/personal-news/</link><guid isPermaLink="false">https://www.freeborncharles.com/personal-news/</guid><pubDate>Mon, 11 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi friends,&lt;/p&gt;
&lt;p&gt;I am thrilled to announce that I have joined the &lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt; and &lt;a href=&quot;https://filecoin.io/&quot;&gt;Filecoin&lt;/a&gt; projects at &lt;a href=&quot;https://protocol.ai/&quot;&gt;Protocol Labs&lt;/a&gt; as a Technical Content Strategist - Technical Writer and Developer Advocate.&lt;/p&gt;
&lt;p&gt;Protocol Labs is building the next generation of the internet - Web 3.0 and helping to advance all of humanity. For example, we are powering the Distributed Web and Web 3 with IPFS and decentralizing storage with Filecoin.&lt;/p&gt;
&lt;p&gt;It is humbling for me to be a part of the team and community that is advancing the next phase of the internet.&lt;/p&gt;
&lt;p&gt;Also excited to share that this week - October 15 - marks the ONE year anniversary of the Filecoin Mainnet Launch. You can join us from around the world in celebrating the &lt;a href=&quot;https://orbit.filecoin.io/&quot;&gt;Filecoin orbits event&lt;/a&gt; happening between October 18 - 22, 2021.&lt;/p&gt;
&lt;p&gt;If you are in Warri Nigeria, join us for the Filecoin Orbit Nigeria event happening on Saturday, October 23, 2021, at Skysense Hub, Effurun-Warri. &lt;a href=&quot;https://gdg.community.dev/events/details/google-gdg-warri-presents-filecoin-orbit-events-2021-warri/&quot;&gt;RSVP here&lt;/a&gt;. And yes, there will be Jollof and swags. :)&lt;/p&gt;
&lt;p&gt;And if you are in the blockchain ecosystem in Africa, please reach out. My DM is open on &lt;a href=&quot;https://twitter.com/charliecodes&quot;&gt;Twitter&lt;/a&gt;, happy to connect and see how I can support your communities via meetups, workshops, and/or conferences around Web 3, the DWeb, IPFS, and Filecoin.&lt;/p&gt;
&lt;p&gt;You can learn more about &lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt; and &lt;a href=&quot;https://filecoin.io/&quot;&gt;Filecoin&lt;/a&gt;. Want to jump into the docs for a deep dive? Check out the docs - &lt;a href=&quot;https://docs.ipfs.io/&quot;&gt;IPFS Docs&lt;/a&gt; and &lt;a href=&quot;https://docs.filecoin.io/&quot;&gt;Filecoin Docs&lt;/a&gt;. Getting started with Web 3? See check out our &lt;a href=&quot;https://proto.school/&quot;&gt;ProtoSchool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Understanding JavaScript Variables - a look at var, let and const]]></title><description><![CDATA[Introduction - What is a Variable? A variable is a container for value. Think of a variable like a box - container. You use this box in…]]></description><link>https://www.freeborncharles.com/javascript-variables/</link><guid isPermaLink="false">https://www.freeborncharles.com/javascript-variables/</guid><pubDate>Tue, 03 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Introduction - What is a Variable?&lt;/h2&gt;
&lt;p&gt;A variable is a container for value.&lt;/p&gt;
&lt;p&gt;Think of a variable like a box - container. You use this box in storing (keeping) things and retrieve these things when you need them. Though the word “storing” might be misleading.&lt;/p&gt;
&lt;p&gt;We can imagine what a variable is using the box, like this - say you have a box for keeping and organising your jewelry.&lt;/p&gt;
&lt;p&gt;You probably have different boxes for the different type of jewelry - diamond, gold and silver. Placing these items in the different boxes, will require you to also label them. With labelling, you can identify which box contains the different collection of your jewelries. Box A will be labelled - “Diamonds”, Box B will be labelled - “Gold” and Box C will be labelled - “Silver”.&lt;/p&gt;
&lt;p&gt;A variable can contain different types of data - from simple data like numbers, and strings, to complex data like arrays and objects.&lt;/p&gt;
&lt;p&gt;And like the name says, the value which a variable holds, can change over-time. This is known as variable re-assignment.&lt;/p&gt;
&lt;p&gt;So then how do we assign values to a variable? It starts with the declaration of the variable - which we look at in the next section.&lt;/p&gt;
&lt;h2&gt;Variable declaration and initialization&lt;/h2&gt;
&lt;h3&gt;Variable declaration&lt;/h3&gt;
&lt;p&gt;To use a variable, it must first be created. This is known as variable declaration. And we declare a variable by using the &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; keyword, followed by the desired name like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; firstName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// declare a variable with firstName&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Variable initialization&lt;/h3&gt;
&lt;p&gt;A variable can be initialized with a value, after the variable’s declaration. By variable initialization, we mean assigning a value to the variable at its point of declaration. We achieve this by first typing the &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; keyword, followed by the assignment operator (&lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;) and the value. Like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; firstName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Charles&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Assign the value &apos;Charles&apos; to the variable firstName&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when we log firstName to the console, we get ‘Charles’ as an output. This is so because firstName - a variable - now contains a value of ‘Charles.’&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Charles&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; statement - the original the keyword for variable&lt;/h3&gt;
&lt;p&gt;In earlier sections, we mentioned that you can use &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; in declaring a variable in JavaScript. But how did we get to having two keywords in variable declaration in one language? It began with a bit of the history. When JavaScript was first created, &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; was the original keyword for variable declaration.&lt;/p&gt;
&lt;p&gt;So if you encounter legacy JavaScript codes, you’d find &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; been used for variable declarations.&lt;/p&gt;
&lt;p&gt;But the use of &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; brought some challenges and pit falls in the language.&lt;/p&gt;
&lt;p&gt;These challenges with &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Variables declared and initialized with &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; can be re-declared like so:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// both valid with var&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Scope - variables declared with &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; is accessible from outside it’s block. That is &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; can said to be a function or global scope.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 4 will be logged to the console.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Hoisting - A varibale can be used before it is declared. While this may sound exciting, it can be misleading, even for you as a developer. Because JavaScript codes are read and executed from top to bottom. And variable declaration is supposed to be processed before code execution.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;lastName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Freeborn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lastName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lastName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// outputs Freeborn&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; the new var&lt;/h3&gt;
&lt;p&gt;In 2015, a major revision (codenamed ES6), to the JavaScript language was done and introduced to the JavaScript community. Known as ECMAScript 2015 or ES6. This release introduced the &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; keyword, for declaring variables and &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; - for declaring constants.&lt;/p&gt;
&lt;p&gt;So we can declare a variable with &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;And here are some of the reasons why you should use &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; as the new var.&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;A variable declared with &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; can not be redeclared, as we saw with &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code sample below will throw a SyntaxError: Identifier ‘age’ has already been declared.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; is block scope. By block &lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt; scope, we mean statements that are grouped together in a curly brace &lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt;. Most times, you will find these code blocks in control flow statements like &lt;code class=&quot;language-text&quot;&gt;if...else&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// this is a code block&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Variables declared with &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; have block scope unlike &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; variables.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// accessible only on this block.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 2 is logged to the console.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2 is logged to the console because let is block scope and only accessible within its block.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Hoisting - as mentioned earlier in our discussion about &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;, using let for hoisting will throw a reference error.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;lastName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Freeborn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lastName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Freeborn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ReferenceError: Cannot access &apos;lastName&apos; before initialization&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;JavaScript variable naming conventions&lt;/h2&gt;
&lt;p&gt;Though JavaScript variables can be given any name that you like, there are some recommended naming conventions, limitations and best practices for naming variables. These include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use meaningful (and descriptive) names in your variable declaration. This will help you - and your team - in understanding what the variable entails and the type of value the variable is expected to hold.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example use &lt;code class=&quot;language-text&quot;&gt;lastName&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;ln&lt;/code&gt; if you want to declare a variable to hold last name of a person.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;You can not use JavaScript reserved words in naming variables. An example of a JavaScript keyword is &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords&quot;&gt;See here for a comprehensive list of JavaScript reserved words&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can’t start a variable name with a number or an underscore.&lt;/li&gt;
&lt;li&gt;It is recommended to use lower camel case names for compound variable names like &lt;code class=&quot;language-text&quot;&gt;finalScore&lt;/code&gt;, instead of &lt;code class=&quot;language-text&quot;&gt;final_Score&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;JavaScript variable names are case sensitive. So &lt;code class=&quot;language-text&quot;&gt;fullName&lt;/code&gt; is not the same as &lt;code class=&quot;language-text&quot;&gt;fullNAme&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Variable types (data types variables can hold)&lt;/h2&gt;
&lt;p&gt;JavaScript is a loosely type language. This implies that you don’t have to specify at the point of variable declaration, the data type that a variable in JavaScript can hold.&lt;/p&gt;
&lt;p&gt;JavaScript will infer the type of data a variable holds at the point of initialization. This is known as type inference.&lt;/p&gt;
&lt;p&gt;Here we take a quick look at the types of data a variable can hold.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// examples of number data type&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.145&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; weight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do note that numbers in JavaScript shouldn’t be in quotes. Doing that converts the number to a string.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Strings - these are characters in JavaScript that are placed inside a single or double quote.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// examples of string&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fruit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Oranges&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; language &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Booleans - values that are &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; eligible &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Arrays - An array is a single object that contains multiple values, enclosed in square brackets, separated by a comma.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fruits &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;apples&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bananas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mangoes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;oranges&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: You access an array by using their location like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fruits&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// outputs apples.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Objects - which is an instance of a class. Objects usually have features and/or attributes. For example, a person has a name, age, height, color.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  fullName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Charles Freeborn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.75&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  sex&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;male&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: we use the dot notation to access or retrieve the value in an object like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fullName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// returns &apos;Charles Freeborn&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;const for Constant - Constants in JavaScript&lt;/h2&gt;
&lt;p&gt;A constant is a variable with a value that doesn’t change after its declaration and assignment.&lt;/p&gt;
&lt;p&gt;pi = 3.14159 is a Mathematical constant and an example of what a constant is.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; statement was introduced as part of the new ES6 features for declaring a “variable constant.”&lt;/p&gt;
&lt;p&gt;One of the key take aways for the constants in JavaScript is that you must assign a value to a constant at the point of declaration. This is so because you can not re-assign a value to a constant after its creation nor redeclare it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.14159&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; radius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; Area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pi &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; radius &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Area&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// outputs 12.56636&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And just like let, const is also block-scoped.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article we looked at understanding the JavaScript variables - &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;. What a variable is? The declaration and assigning values to variables. Some challenges associated with using the &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; statement and then an introduction to the &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; statement. We also briefly talked about &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; for constants.&lt;/p&gt;
&lt;p&gt;If you find this article insightful, please consider sharing.&lt;/p&gt;
&lt;p&gt;Happy Coding!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What does the Cascade Mean in CSS?]]></title><description><![CDATA[What does the Cascade mean in CSS The CSS cascade assigns a weight to each style rule. When several rules apply, the one with the greatest…]]></description><link>https://www.freeborncharles.com/css-cascade/</link><guid isPermaLink="false">https://www.freeborncharles.com/css-cascade/</guid><pubDate>Tue, 16 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What does the Cascade mean in CSS&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The CSS cascade assigns a weight to each style rule. When several rules apply, the one with the greatest weight takes precedence. - &lt;a href=&quot;https://www.w3.org/TR/css3-cascade/#cascade&quot;&gt;CSS Spec&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cascade in CSS is the interpretation of style rules from top to bottom.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The cascade is the set of rules of how different styles fit together, override each other and how the browser puts together these different variables and renders them. -  &lt;a href=&quot;https://twitter.com/MiriSuzanne&quot; target=&quot;_blank&quot;&gt;Mariam Suzanne&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a presentation layer, CSS interpets how elements are styled and rendered in the browser according to the style rule, using a top to bottom order. And this is the underlying premise of the &lt;code class=&quot;language-text&quot;&gt;Cascade&lt;/code&gt; in CSS.&lt;/p&gt;
&lt;p&gt;From the definition above, this is what happens when we talk about cascade. First there is the set of rules (&lt;code class=&quot;language-text&quot;&gt;property/value&lt;/code&gt; pair) stating how the style should be rendered. &lt;/p&gt;
&lt;p&gt;These rules can then be overriden by the cascade, following the order in which the rules were written. When there is conflict in the rules, assumiong the conflicting rules have the same weight and specificity, then the latest rule takes precedence.&lt;/p&gt;
&lt;p&gt;The Cascade in CSS means that style-rules are interpreted from top to bottom, such that should elements have the same weight and specificity, the latest style rule will be applied. &lt;/p&gt;
&lt;p&gt;So the cascade helps in resolving conflicting style-rules. Here is an example.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This is a sample text&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lightgreen&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* The text color will be lightgreen because it appears last in the order of the style rule. */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Understanding Basic CSS Selectors]]></title><description><![CDATA[Introduction to CSS Selectors How do you determine (target) what part or section of a HTML document that needs to be styled? You can achieve…]]></description><link>https://www.freeborncharles.com/css-basic-selectors/</link><guid isPermaLink="false">https://www.freeborncharles.com/css-basic-selectors/</guid><pubDate>Mon, 03 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Introduction to CSS Selectors&lt;/h1&gt;
&lt;p&gt;How do you determine (target) what part or section of a HTML document that needs to be styled? You can achieve this, by using &lt;code class=&quot;language-text&quot;&gt;CSS selectors&lt;/code&gt;. So then what is a &lt;code class=&quot;language-text&quot;&gt;selector&lt;/code&gt;? &lt;/p&gt;
&lt;p&gt;At the most fundamental level, CSS selectors are used to define or target the element we wish to style. &lt;/p&gt;
&lt;p&gt;Every CSS rule-set begins with a selector, telling the browser the element the rule should be applied to.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the selector from the syntax above, can be a HTML element/tag like &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;property/value&lt;/code&gt; pair like &lt;code class=&quot;language-text&quot;&gt;{color: green}&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;This can be written like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there are different types of selectors, though we will be looking at basic selectors in this article.&lt;/p&gt;
&lt;h2&gt;Selector List&lt;/h2&gt;
&lt;p&gt;You can create a selector list by combining different elements using the comma (&lt;code class=&quot;language-text&quot;&gt;,&lt;/code&gt;) for properties whose values will be the same when styled. Assuming that two elements on your page will have the style rule, you can reduce the number of styles rules written by combining those elements as a selector list.&lt;/p&gt;
&lt;p&gt;Here’s an example. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This is a level 2 heading&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;And this is level 3 heading&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can have separate styles targeting the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; elements on our CSS file like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using a selector list however, you can style both &lt;code class=&quot;language-text&quot;&gt;h1&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;h2&lt;/code&gt; to use the same style and reduce the number of style-rule like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1, h2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Basic Selector Types&lt;/h2&gt;
&lt;h3&gt;Tag or Type Selector&lt;/h3&gt;
&lt;p&gt;Tag or type selector is used to target and style unique HTML elements or tags like &lt;code class=&quot;language-text&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. For example, say you have a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in our html file like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Understanding Basic CSS Selectors&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can target the &lt;code class=&quot;language-text&quot;&gt;h1&lt;/code&gt; using tag selector like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Class Selectors (&lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class&quot;&gt;HTML class attribute&lt;/a&gt; can be used to specify a class for a HTML element. And several HTML elements can have the same class.&lt;/p&gt;
&lt;p&gt;You can have multiple classes by separating them with a space like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;selector1 selector2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Class Selectors&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Class selectors can be styled by preceding the name of the class with a period (&lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt;). &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Class Selector&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;”para”&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Styling the paragraph using classes&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;”para”&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Taking a deep dive into selectors&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.para&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 18px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #1E47FA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can view the output of the syling on &lt;a href=&quot;https://codepen.io/freeborncharles/pen/qBbjZOz&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ID Selectors (#)&lt;/h3&gt;
&lt;p&gt;The ID selector is used to select and style unique HTML element. The element name is preceded by the hashtag (or pound) sign. Unlike class selector, a HTML document can only have a unique ID.&lt;/p&gt;
&lt;p&gt;ID selectors will override class and tag selectors style. And this is because IDs have a high precedence over class and tag selectors. &lt;/p&gt;
&lt;p&gt;We will discuss this on our specificity article.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;”sub-heading”&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;ID Selectors&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;An ID selector example&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#sub-heading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 18px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ID selectors has a high precedence over the class and tag selectors. That is &lt;/p&gt;
&lt;h3&gt;Attribute Selectors&lt;/h3&gt;
&lt;p&gt;Elements in HTML have &lt;a href=&quot;https://www.w3schools.com/html/html_attributes.asp&quot;&gt;attributes&lt;/a&gt; which give more information about the HTML element. Therefore, you can also style an element by targeting an attribute or using the value present in the attribute.&lt;/p&gt;
&lt;p&gt;For example - &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* targeting an element using the presence of the title attribute */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;a [title]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* targeting an element using the particular value of an attribute */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;a [href=&quot;https://freeborncharles.com&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Want to learn more about attribute selectors? Please read the spec &lt;a href=&quot;https://www.w3.org/TR/selectors-3/#attribute-selectors&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Pseudo-class and Pseudo-element Selectors&lt;/h3&gt;
&lt;p&gt;HTML elements can have different states which can be selected and styled, using pseudo-class selectors.&lt;/p&gt;
&lt;p&gt;For example the &lt;code class=&quot;language-text&quot;&gt;:hover&lt;/code&gt; pseudo class can be selected and styled when a user hovers the mouse on the element.&lt;/p&gt;
&lt;p&gt;Here’s an example.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Hover around here&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the CSS&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;a:hover&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #6893F7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pseudo element selectors select a part of an element for styling. For example, let’s assume you want to style the first-line paragraph of an online newspaper article, you can target the first-line like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;p:first-line&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;text-transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; capitalize&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Universal Selectors (*)&lt;/h3&gt;
&lt;p&gt;Most web browsers have a default stylesheet, which they use to render a page in the absence of an external stylesheet. These default stylesheets are known as &lt;a href=&quot;https://en.wikipedia.org/wiki/User_agent&quot;&gt;user agent&lt;/a&gt; stylesheets. &lt;/p&gt;
&lt;p&gt;And this default stylesheets from the browser sets values for the padding and margin. &lt;/p&gt;
&lt;p&gt;So how do we alter the state of the default values? Steps in the universal selector. We can use the universal selector.&lt;/p&gt;
&lt;p&gt;You can use this to reset the browser’s default style and start with a clean slate.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary and Key Take-aways&lt;/h2&gt;
&lt;p&gt;Being able to know what element to &lt;code class=&quot;language-text&quot;&gt;select&lt;/code&gt; and style is an invaluable skill-set in CSS.&lt;/p&gt;
&lt;p&gt;I do hope you find this quite article on basic CSS selectors quite insightful. We looked at the following -
&lt;code class=&quot;language-text&quot;&gt;selectors&lt;/code&gt; - the method in CSS used to target an element or group of elements for styling.&lt;/p&gt;
&lt;p&gt;Basic types of selectors - tag/element, class, ID, attribute, pseudo-class and pseudo-element selectors, and universal selectors.&lt;/p&gt;
&lt;h3&gt;Wanna go deeper?&lt;/h3&gt;
&lt;p&gt;Thanks for reading - this is my digital garden where I will be sharing my learnings and cogitations on the modern web. I will be looking at specificity in the next article.&lt;/p&gt;
&lt;p&gt;Here is the link to the code sample of all the basic CSS selector examples on &lt;a href=&quot;https://codepen.io/freeborncharles/pen/qBbjZOz&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And you if you wish to dive deeper, you can check &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS&quot;&gt;the MDN docs on CSS&lt;/a&gt; and the &lt;a href=&quot;https://www.w3.org/TR/selectors-3/&quot;&gt;CSS Selectors Spec on W3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please help to share this.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is CSS? A simplified introduction to CSS]]></title><description><![CDATA[What is CSS - Cascading Style Sheets? In the absence of styling, browsers interpret HTML in its default state - color of texts will be black…]]></description><link>https://www.freeborncharles.com/what-is-css/</link><guid isPermaLink="false">https://www.freeborncharles.com/what-is-css/</guid><pubDate>Thu, 18 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is CSS - Cascading Style Sheets?&lt;/h2&gt;
&lt;p&gt;In the absence of styling, browsers interpret HTML in its default state - color of texts will be black, background will be white, headings will be bigger, as expected over regular texts.&lt;/p&gt;
&lt;p&gt;CSS - Cascading Style Sheets - is the language for handling the look and feel of web pages. CSS handles how web pages appear to users, that is the presentation and accessibility of the document to users.&lt;/p&gt;
&lt;p&gt;CSS can be used for basic styling of texts, to complex effects like animations. For example, CSS can be used to define color, font-size, and/or background of websites created in a markup language (HTML) document.&lt;/p&gt;
&lt;h2&gt;CSS Syntax&lt;/h2&gt;
&lt;p&gt;CSS syntax takes the form of a rule-based language. You define rules stating how styles should be applied to particular element(s) on a web page.&lt;/p&gt;
&lt;p&gt;The syntax consist of &lt;code class=&quot;language-text&quot;&gt;selector(s)&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;property: value;&lt;/code&gt; pair which is referred to as declaration.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For clarity and ease of reading, it is recommended to write your CSS like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;selector&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can have more than one &lt;code class=&quot;language-text&quot;&gt;property: value;&lt;/code&gt; pair in a CSS rule. And this will we call a declaration block. 
Let’s assume that you want the heading of your web page to be of text blue and a font size of 6em. You will achieve this in CSS, writing the rule as a declaration block, like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 6em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And when we say CSS is a rule-based language, what do we mean? It implies that we start with a selector and in the code sample above, the selector is the HTML element &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; that the rule will affect. The curly braces &lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt; holds one or more declarations. The property is the CSS rule, whilevalue is the value to be assigned to the property - how we want the property to be affected.&lt;/p&gt;
&lt;p&gt;And for the code sample above, our &lt;code class=&quot;language-text&quot;&gt;property: value;&lt;/code&gt; declaration is respectively &lt;code class=&quot;language-text&quot;&gt;color: blue;&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;font-size: 6em;&lt;/code&gt;. 
Properties in CSS, accept values that are consistent with them. A color property will accept or take color values.&lt;/p&gt;
&lt;h2&gt;Comments in CSS&lt;/h2&gt;
&lt;p&gt;Comments - non executable piece of code - in CSS can be written like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* This is a single line comment in CSS */&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 
This is also a multi-line
comment in CSS
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whatever is written inside of &lt;code class=&quot;language-text&quot;&gt;/* */&lt;/code&gt; is noted as a comment and will not be interpreted by CSS.&lt;/p&gt;
&lt;p&gt;And some of the reasons, why we use comments in programming is for clarity of purpose, for our future reference or other developers who may be reading our code or working on the project with us.&lt;/p&gt;
&lt;h2&gt;Applying CSS in a web application - HTML document&lt;/h2&gt;
&lt;p&gt;The earlier part of this article focused on defining CSS and its syntax, but CSS is meant to work closely with markup documents like HTML. 
So how do we apply CSS to a web app - HTML document?&lt;/p&gt;
&lt;h3&gt;1. Inline Style&lt;/h3&gt;
&lt;p&gt;A single HTML element can be styled, by applying CSS inside the style attribute of the HTML element.&lt;/p&gt;
&lt;p&gt;Let’s assume that you want the heading in your web page to be a warning text with the color of red. You can use inline style to achieve that like so.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS Example - Inline Style&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token style-attr language-css&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Inline Style&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;It is not recommended to use CSS like this. That is inline styling&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the code sample in &lt;a href=&quot;https://codepen.io/freeborncharles/pen/eYJBGLg&quot;&gt;Codepen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is not recommend to use CSS like this because of the difficulty in maintenance of the web app, as a required change to the style, will require a lots of CSS edits on the page.&lt;/p&gt;
&lt;h3&gt;2. Internal (Embedded) Styles&lt;/h3&gt;
&lt;p&gt;In internal styling, both HTML and CSS is found in a single page.&lt;/p&gt;
&lt;p&gt;You apply CSS to an HTML document by putting the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element, in the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the HTML document. 
Here is how.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS Example - Internal Style&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
 &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;
   &lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 960px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lightblue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Internal Styling Sample&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;You can also style your web page using internal styling as shown.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the code sample in &lt;a href=&quot;https://codepen.io/freeborncharles/pen/gOPLXYN&quot;&gt;Codepen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Internal styling is better than inline style, but the drawback for this method, is working on a web app with multiple pages - the developer will have to style every page associated with the app internally, which comes at a high cost of maintaining the site.&lt;/p&gt;
&lt;h3&gt;3. External Styles&lt;/h3&gt;
&lt;p&gt;Applying the principle of separation of concern of the core web technologies - HTML, CSS and JavaScript - where HTML is for content/structure, CSS for presentation and JavaScript for interactivity/behaviour with the user, we can use this principle to style multiple web pages in an app, using a CSS file.&lt;/p&gt;
&lt;p&gt;CSS file ends with the &lt;code class=&quot;language-text&quot;&gt;.css&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;You apply a &lt;code class=&quot;language-text&quot;&gt;.css&lt;/code&gt; file to an HTML document using the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element like this, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;main.css&amp;quot;&amp;gt;&lt;/code&gt; and this will be in the head of the HTML document.&lt;/p&gt;
&lt;p&gt;Here is an example, first the HTML document.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;What is CSS?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;main.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;External Styling Sample&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This is a sample page styled using external style sheets.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next the &lt;code class=&quot;language-text&quot;&gt;.css&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 960px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #c9f3f3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #9b59b6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #9b59b6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the code sample in &lt;a href=&quot;https://codepen.io/freeborncharles/pen/KKVNyjQ&quot;&gt;Codepen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The above code sample, assumes that the main.css file is in the same directory (folder) as the HTML file. Do note that the href attribute of the HTML file must match the path of the .css file, for the linking.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is the first in the series of articles, I hope to write, covering the core fundamentals of CSS.&lt;/p&gt;
&lt;p&gt;And if you find this article interesting, please share.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is GraphQL? - A high level overview]]></title><description><![CDATA[Introducing GraphQL In 2012, Facebook in its bid to solve some of the challenges inherent with REST like over-fetching and under-fectching…]]></description><link>https://www.freeborncharles.com/graphql/</link><guid isPermaLink="false">https://www.freeborncharles.com/graphql/</guid><pubDate>Thu, 23 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Introducing GraphQL&lt;/h1&gt;
&lt;p&gt;In 2012, Facebook in its bid to solve some of the challenges inherent with REST like over-fetching and under-fectching of data, created the GraphQL specification.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; at its most fundamental level is a language for querying APIs and a server-side runtime for running queries using a type system, which is defined using the Schema Definition Language (SDL) for data - giving client the data that it requests from an API. Think of GraphQL as an application layer query language, just as SQL is a data layer query language.&lt;/p&gt;
&lt;p&gt;GraphQL is currently being managed by a community of software developers - since it was open-sourced in 2015. One of the big wins for GraphQL is that it is self-documenting.&lt;/p&gt;
&lt;p&gt;A GraphQL service is created by defining types and fields, and providing functions for each field on the types. But how do we go about defining these types and fields? We take a look at some core concepts in answering this question.&lt;/p&gt;
&lt;h2&gt;Core Concepts of GraphQL&lt;/h2&gt;
&lt;p&gt;GraphQL is centred on some basic concepts like schema, mutation, subscription, and resolver function.&lt;/p&gt;
&lt;h3&gt;The Schema&lt;/h3&gt;
&lt;p&gt;In GraphQL, a service is created through the definition of types and fields using the Schema Definition Language - SDL. This implies that GraphQL is strongly typed. The Schema helps to define the capability of an API and how clients can make requests to the data. Schema also serves as a contract between servers and clients. It’s worth noting that the schema defines root types for the entry point of the API.&lt;/p&gt;
&lt;p&gt;Here is an example on how you use schema to create a type and fields -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code sample means we created a User type with two fields -  id and name, consisting of ID and String types. The exclamation ! implies that the field is required.&lt;/p&gt;
&lt;h3&gt;Mutation&lt;/h3&gt;
&lt;p&gt;Mutation in GraphQL is used to handle changes to data. There are three basic kinds of mutations - creating new data, updating existing data and deleting existing data. &lt;/p&gt;
&lt;p&gt;Use the mutation keyword to create or make changes to data like so -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          createCustomer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Charles&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Male&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                         name
                         gender
                         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Subscription&lt;/h3&gt;
&lt;p&gt;With subscription, clients can subscribe to an event, and maintain a connection to the server - when the event is triggered, the server sends the data to the client.&lt;/p&gt;
&lt;p&gt;Here is an example -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;subscription &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
             newPerson&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                       name
                       gender
                      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Resolver Function&lt;/h3&gt;
&lt;p&gt;The resolver function aids in the delivery of data when a query is made.  It works in such a way that the received query is first checked to ensure it refers to only the types and fields that has been defined by the schema. &lt;/p&gt;
&lt;p&gt;And here is where the resolver function comes in - helping to provide the result in JSON.&lt;/p&gt;
&lt;p&gt;Here is an example -
The query&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    me&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        firstName
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The JSON &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// JSON result&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Charles&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Hello World - Introducing the Freeborn Charles Blog]]></title><description><![CDATA[Welcome to the Freeborn Charles Blog Hello world, Welcome to my blog - The Freeborn Charles Blog. Here I will be sharing my thoughts and…]]></description><link>https://www.freeborncharles.com/hello-world/</link><guid isPermaLink="false">https://www.freeborncharles.com/hello-world/</guid><pubDate>Mon, 24 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Welcome to the Freeborn Charles Blog&lt;/h1&gt;
&lt;p&gt;Hello world,&lt;/p&gt;
&lt;p&gt;Welcome to my blog - The Freeborn Charles Blog. Here I will be sharing my thoughts and learnings on the modern web development - JavaScript, React, Gatsby and the JAMstack.&lt;/p&gt;
&lt;p&gt;I’m particularly interested in JavaScript and the ecosystem. And so will be starting the blog with a series of articles on the core fundamentals of the JavaScript language.&lt;/p&gt;
&lt;p&gt;I have a background in Computer Science, Front-End Web development, technical writing and building of developer communities - currently leading the Google Developer Group, GDG Warri and the Facebook Developer Circles, Warri, both in Nigeria.&lt;/p&gt;
&lt;p&gt;My transition into technical writing was influenced by my work with the freeCodeCamp - I was a volunteer editor for the freeCodeCamp for over one and a half years. &lt;/p&gt;
&lt;h2&gt;What to expect from me?&lt;/h2&gt;
&lt;p&gt;You should expect to see articles on the modern web development. I’d be writing on the following -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Gatsby&lt;/li&gt;
&lt;li&gt;The JAMstack&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for visiting and keep an eye on this blog.&lt;/p&gt;</content:encoded></item></channel></rss>